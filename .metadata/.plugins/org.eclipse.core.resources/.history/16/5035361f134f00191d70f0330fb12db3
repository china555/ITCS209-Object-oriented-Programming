

//Patarapong Jomkhamsri
//ID 6188114
public class Player {

	public enum PlayerType {Healer, Tank, Samurai, BlackMage, Phoenix, Cherry};

	private PlayerType type; // Type of this player. Can be one of either Healer, Tank, Samurai, BlackMage,
								// or Phoenix
	private double maxHP; // Max HP of this player
	private double currentHP; // Current HP of this player
	private double atk; // Attack power of this player
	
	//ADD
	private int nubturn = 0;
	private int ultiturn;
	private Player infected = null;
	private String nameTeam;
	private String Rows;
	private int area;
	private boolean isProtecting;
	private boolean isinfected;
	private boolean isPassout;

	/**
	 * Constructor of class Player, which initializes this player's type, maxHP, atk, numultiturns, 
	 * as specified in the given table. It also reset the internal turn nubturn of this player. 
	 * @param _type
	 */
	public Player(PlayerType _type)
	{	
		//INSERT YOUR CODE HERE
		this.type = _type;
		switch(this.type) 
		{
			case Tank:
				this.maxHP = 5340;
				this.atk = 255;
				this.currentHP = 5340;
				ultiturn = 4;
				break;
			case Healer:
				this.maxHP = 4790;
				this.atk = 238;
				this.currentHP = 4790;
				ultiturn = 4;
				break;
			case BlackMage:
				this.maxHP = 4175;
				this.atk = 303;
				this.currentHP = 4175;
				ultiturn = 4;
				break;
			case Samurai:
				this.maxHP = 4005;
				this.atk = 368;
				this.currentHP = 4005;
				ultiturn = 3;
				break;
			case Cherry:
				this.maxHP = 3560;
				this.atk = 198;
				this.currentHP = 3560;
				ultiturn = 4;
				break;
			case Phoenix:
				this.maxHP = 4175;
				this.atk = 209;
				this.currentHP = 4175;
				ultiturn = 8;
				break;
			default:
		}
	}

	/**
	 * Returns the current HP of this player
	 * 
	 * @return
	 */
	public double getCurrentHP() {
		// INSERT YOUR CODE HERE
		return currentHP;
	}

	/**
	 * Returns type of this player
	 * 
	 * @return
	 */
	public Player.PlayerType getType() {
		// INSERT YOUR CODE HERE
		return type;
	}

	/**
	 * Returns max HP of this player.
	 * 
	 * @return
	 */
	public double getMaxHP() {
		// INSERT YOUR CODE HERE
		return maxHP;
	}

	/**
	 * Returns whether this player is sleeping.
	 * 
	 * @return
	 */
	public boolean isSleeping() {
		// INSERT YOUR CODE HERE
		return isPassout ;
	}

	/**
	 * Returns whether this player is being infected.
	 * 
	 * @return
	 */
	public boolean isCursed() {
		// INSERT YOUR CODE HERE
		return isinfected;
	}

	/**
	 * Returns whether this player is alive (i.e. current HP > 0).
	 * 
	 * @return
	 */
	public boolean isAlive() {
		// INSERT YOUR CODE HERE
		if(this.currentHP >0) {
		return true;
		}else {
			return false;
		}
	}

	/**
	 * Returns whether this player is taunting the other team.
	 * 
	 * @return
	 */
	public boolean isTaunting() {
		// INSERT YOUR CODE HERE
		return isProtecting;
	}

	public void attack(Player wanted) {
		// INSERT YOUR CODE HERE
		wanted.currentHP = wanted.currentHP -  this.atk; 
		if(wanted.currentHP < 0) {
			wanted.currentHP = 0;
		}
	}

	public void useSpecialAbility(Player[][] myTeam, Player[][] theirTeam) {
		// INSERT YOUR CODE HERE
		nubturn =0;
		switch(type) {
		case Phoenix:
			Player zombie = myTeam[0][0];
			boolean find_zombie = false;
			for (int i = 0; i < 2; i++) {
				for (int j = 0; j < myTeam[0].length; j++) {
					if(!myTeam[i][j].isAlive() && find_zombie == false) {
						zombie = myTeam[i][j];
						find_zombie = true;
					}
				}
			}
			System.out.println("#"+playerInfo()+"Revives"+zombie.playerInfo());
			zombie.currentHP = zombie.currentHP + (zombie.maxHP*0.3);
			zombie.nubturn = 0;
			zombie.setTaunting(false);
			zombie.setinfected(false);
			zombie.setSleeeping(false);
			break;
		case Healer:
			Player lowest = seekHealer(myTeam);
			if(lowest.isinfected) {
				return;
			}
			if(lowest.currentHP<lowest.maxHP && lowest.currentHP > 0 && lowest.isinfected == false) {
				System.out.println("#"+playerInfo()+" Heals "+lowest.playerInfo());
				lowest.currentHP = lowest.currentHP + (lowest.maxHP * 0.25);
				if(lowest.currentHP > lowest.maxHP) {
					lowest.currentHP = lowest.maxHP;
				}
			}
			break;
		case Tank:
				System.out.println("#"+playerInfo()+" is Taunting ");
				setTaunting(true);
			break;
		case BlackMage:
			Player cursing = seekInfects(theirTeam);
			if(isProtecting(theirTeam) != null) {
				cursing = isProtecting(theirTeam);
			}
			if (cursing != null) {
				System.out.println("#"+playerInfo()+" Curses "+cursing.playerInfo());
				cursing.setinfected(true);
				this.infected = cursing;
			}
			break;
		case Cherry:
			for (int i = 0; i < 2; i++) {
				for (int j = 0; j < theirTeam[0].length; j++) {
					if(theirTeam[i][j].isAlive()) {
						System.out.println("#"+playerInfo()+" Feeds a Fortune Cookies to "+theirTeam[i][j].playerInfo());
						theirTeam[i][j].setSleeeping(true);
					}
				}
			}
			break;
		}
		}

	/**
	 * This method is called by Arena when it is this player's turn to take an
	 * action. By default, the player simply just "attack(wanted)". However, once
	 * this player has fought for "numultiturns" rounds, this player must perform
	 * "useSpecialAbility(myTeam, theirTeam)" where each player type performs his
	 * own special move.
	 * 
	 * @param arena
	 */
	public void takeAction(Arena arena) {
		// INSERT YOUR CODE HERE
		if(this.type == PlayerType.BlackMage && infected != null) {
			infected.setinfected(false);
			infected = null;
		}
		if(this.isProtecting) {
			this.setTaunting(false);
		}
		if(this.isPassout) {
			this.setSleeping(false);
			return;
		}
		nubturn++;
		Player[][] myteam = null;
		Player[][] Theirteam = null;
		if(arena.getMyTeam(this) == arena.getTeamA()) {
			 myteam = arena.getTeamA();
			 Theirteam = arena.getTeamB();	
		}
		else if(arena.getMyTeam(this) == arena.getTeamB()) {
			 myteam = arena.getTeamB();
			 Theirteam = arena.getTeamA();
		}
		if(nubturn == this.ultiturn) {
		switch(this.type) {
		case Healer:
			useSpecialAbility(myteam, Theirteam);
			break;
		case Tank:
			useSpecialAbility(myteam, Theirteam);
			break;
		case Samurai:
			nubturn = 0;
			Player wanted = arena.findwanted(this);
			if(wanted == null) {
				return;
			}
				System.out.println("#"+playerInfo()+" Double-Slash "+wanted.playerInfo());
				attack(wanted);
				attack(wanted);
				break;
		case BlackMage:
			useSpecialAbility(myteam, Theirteam);
			break;
		case Phoenix:
			useSpecialAbility(myteam, Theirteam);
			break;
		case Cherry:
			useSpecialAbility(myteam, Theirteam);
			break;
		}
		}
		else {
			Player wanted = arena.findwanted(this);
			if(wanted != null) {
				attack(wanted);
				
				System.out.println("#"+playerInfo()+" Attacks "+wanted.playerInfo()/*+wanted.currentHP*/);
			}
		}
		
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < Theirteam[i].length; j++) {
				if(Theirteam[i][j].isAlive() ==false) {
					Theirteam[i][j].isinfected = false;
					Theirteam[i][j].isProtecting = false;
					Theirteam[i][j].isPassout = false;
				}
			}
		}
}

	/**
	 * This method overrides the default Object's toString() and is already
	 * implemented for you.
	 */
	@Override
	public String toString() {
		return "[" + this.type.toString() + " HP:" + this.currentHP + "/" + this.maxHP + " ATK:" + this.atk + "]["
				+ ((this.isinfected()) ? "C" : "") + ((this.isProtecting()) ? "T" : "") + ((this.isSleeping()) ? "S" : "")
				+ "]";
	}
	//=======================//ADD//===============================//
	public String playerInfo() {
		return this.nameTeam+"["+this.Rows+"]["+this.area+"] {"+this.type.toString()+"}";
	}
	public Player seekHealer(Player[][] myteam) {
		double lowest = 9999;
		Player wanted = null;
		for(int i =0;i<2;i++) {
			if(i==0) {
				for(int j =0;j<myteam[i].length;j++) {
					if(myteam[i][j].getCurrentHP() > 0 && myteam[i][j].getCurrentHP() /(myteam[i][j].getMaxHP())*100 < lowest) {
						lowest = myteam[i][j].getCurrentHP()/(myteam[i][j].getMaxHP())*100;
						wanted = myteam[i][j];
					}
				}
			}
			else {
				for (int j = 0; j < myteam[i].length; j++) {
					if(myteam[i][j].getCurrentHP() > 0 && myteam[i][j].getCurrentHP() /(myteam[i][j].getMaxHP())*100 < lowest) {
						lowest = myteam[i][j].getCurrentHP()/(myteam[i][j].getMaxHP())*100;
						wanted = myteam[i][j];
						
					}
				}
			}
		}
		return wanted;
	}
	public Player seekInfects(Player[][] theirTeam) {
		double lowvalue = 9999;
		Player wanted = null;
		boolean findinfects = false;
		for (int i = 0; i < 2; i++) {
			if(i==0) {
				for (int j = 0; j < theirTeam[i].length; j++) {
					if(theirTeam[i][j].isAlive() && findinfects == false &&theirTeam[i][j].currentHP < lowvalue ) {
						lowvalue = theirTeam[i][j].currentHP;
						wanted = theirTeam[i][j];
						findinfects = true;
					}
				}
			}else {
				for (int j = 0; j < theirTeam[i].length; j++) {
					if(theirTeam[i][j].isAlive() && theirTeam[i][j].currentHP < lowvalue && findinfects == false) {
						lowvalue = theirTeam[i][j].currentHP;
						wanted = theirTeam[i][j];
						findinfects = true;
					}
				}
			}
		}
		return wanted;
	}
	public Player isProtecting(Player[][] team) {
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < team[i].length; j++) {
				if(team[i][j].isProtecting) {
					return team[i][j];
				}
			}
		}
		return null;
	}
	public String getnameTeam() {
		return nameTeam;
	}
	public String getRows() {
		return Rows;
	}
	public int getarea() {
		return area;
	}
	public void setarea(int area,String nameTeam,String Rows) {
		this.area = area;
		this.nameTeam = nameTeam;
		this.Rows = Rows;
	}
	public void setSleeeping(boolean isPassout) {
		this.isPassout = isPassout;
	}

	public void setTaunting(boolean isProtecting) {
		this.isProtecting = isProtecting;
	}

	public void setCursed(boolean isinfected) {
		this.isinfected = isinfected;
    }
	public void setSleeping(boolean isSleeping) {
		this.isPassout = isSleeping;
	}
}
