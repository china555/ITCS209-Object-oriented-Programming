// Name:Kittikorn	
// Student ID:6188086
// Section: 1

import java.io.BufferedReader;
import java.io.Closeable;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.security.acl.Group;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class SimpleMovieSearchEngine implements BaseMovieSearchEngine {
	public Map<Integer, Movie> movies ;
	
	@Override
	public Map<Integer, Movie> loadMovies(String movieFilename) {
		
		// YOUR CODE GOES HERE
		try {
			BufferedReader br = new BufferedReader(new FileReader(movieFilename));
			this.movies = new HashMap<Integer, Movie>();
			String line;
			String regexPattern = "([\\d]+),\"?(.*)\\(([\\d]+)\\)\"?,(.*)";
			Pattern p = Pattern.compile(regexPattern);
			Matcher m;
			while ((line = br.readLine()) != null) {
				m = p.matcher(line);
				if (m.matches()) {
					int movieID = Integer.parseInt(m.group(1));
					String movieTitle = m.group(2);
					int movieYear = Integer.parseInt(m.group(3));
					String[] movieTags = m.group(4).split("\\|");

					this.movies.put(movieID, new Movie(movieID, movieTitle, movieYear));
					for(String tag: movieTags) {
						this.movies.get(movieID).addTag(tag);
					}
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return movies;
	}

	@Override
	public void loadRating(String ratingFilename) {

		// YOUR CODE GOES HERE
		try {
			BufferedReader br = new BufferedReader(new FileReader(ratingFilename));
			String line;
			String regexPattern = "([0-9]+),([0-9]+),([0-9]\\.[0-9]),([0-9]+)"; // regex
			Pattern p = Pattern.compile(regexPattern);
			Matcher m;
			br.readLine();
			while ((line = br.readLine()) != null) {
				m = p.matcher(line);
				if (m.matches()) {
					int userID = Integer.parseInt(m.group(1));
					int movieID = Integer.parseInt(m.group(2));
					double movieRating =  Double.parseDouble(m.group(3));
					long timestamp = Long.parseLong(m.group(4));
					if(movies.get(movieID) != null) {
						movies.get(movieID).addRating(new User(userID),movies.get(movieID), movieRating, timestamp);
					}
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void loadData(String movieFilename, String ratingFilename) {
	
		// YOUR CODE GOES HERE
		loadMovies(movieFilename);
		loadRating(ratingFilename);
	}

	@Override
	public Map<Integer, Movie> getAllMovies() {

		// YOUR CODE GOES HERE
		if(movies.size() == 0) {
			return null;
		}
		return movies;
	}

	@Override
	public List<Movie> searchByTitle(String title, boolean exactMatch) {
		
		// YOUR CODE GOES HERE
		List<Movie> result = new ArrayList<Movie>();
		for(Integer key: movies.keySet()) {
			String titleLowerCase = movies.get(key).getTitle().toLowerCase();
			if(titleLowerCase.contains(title)) {
				result.add(movies.get(key));
			}
		}
		return result;
	}

	@Override
	public List<Movie> searchByTag(String tag) {

		// YOUR CODE GOES HERE
		List<Movie> s_tag = new ArrayList<Movie>();
		for(Integer i : movies.keySet()) {
			if(movies.get(i).getTags().contains(tag)) {
				s_tag.add(movies.get(i));
			}
		}
		return s_tag;
	}

	@Override
	public List<Movie>searchByYear(int year) {

		// YOUR CODE GOES HERE
		List<Movie> s_year = new ArrayList<Movie>();
		for(Integer i : movies.keySet()) {
			if(movies.get(i).getYear() == year) {
				s_year.add(movies.get(i));
			}
		}
		return s_year;
	}

	@Override
	public List<Movie> advanceSearch(String title, String tag, int year) {

		// YOUR CODE GOES HERE
		List<Movie> result = new ArrayList<Movie>();
		for(Integer key: movies.keySet()) {
			if(title == null) {
				Set<String> listTags = movies.get(key).getTags();
				for(String list : listTags) {
					if(list.contains(tag)) {
						if(movies.get(key).getYear()==year) {
							result.add(movies.get(key));
						}
					}
				}
			}else if(tag == null) {
				String titleLowerCase = movies.get(key).getTitle().toLowerCase();
				if(titleLowerCase.contains(title)) {
					if(movies.get(key).getYear()==year) {
						result.add(movies.get(key));
					}
				}
			}else if(year == -1) {
				Set<String> listTags = movies.get(key).getTags();
				String titleLowerCase = movies.get(key).getTitle().toLowerCase();
				for(String list : listTags) {
					if(titleLowerCase.contains(title)) {
						if(list.contains(tag)) {
							result.add(movies.get(key));
						}
					}
				}
			}else {
				Set<String> listTags = movies.get(key).getTags();
				String titleLowerCase = movies.get(key).getTitle().toLowerCase();
				for(String list : listTags) {
					if(titleLowerCase.contains(title)) {
						if(list.contains(tag)) {
							if(movies.get(key).getYear() == year)
								result.add(movies.get(key));
						}
					}
				}
			}
		}
		return result;
	}

	@Override
	public List<Movie> sortByTitle(List<Movie> unsortedMovies, boolean asc) {

		// YOUR CODE GOES HERE
		if(asc == true) {
			unsortedMovies.sort(Comparator.comparing(Movie::getTitle));
			return unsortedMovies;
		}else if(asc == false) {
			unsortedMovies.sort(Comparator.comparing(Movie::getTitle).reversed());
			return unsortedMovies;
		}
		return null;
	}

	@Override
	public List<Movie> sortByRating(List<Movie> unsortedMovies, boolean asc) {

		// YOUR CODE GOES HERE
		
		if(asc) {
			unsortedMovies.sort(Comparator.comparingDouble(Movie::getMeanRating));
		}else if(asc == false) {
			unsortedMovies.sort(Comparator.comparingDouble(Movie::getMeanRating).reversed());
		}
		return unsortedMovies;
	}

}
