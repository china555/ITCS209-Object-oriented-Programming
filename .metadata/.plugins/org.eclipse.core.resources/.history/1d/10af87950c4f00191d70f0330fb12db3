

//sarun junbang
//ID 6188080
public class Player {

	public enum PlayerType {Healer, Tank, Samurai, BlackMage, Phoenix, Cherry};

	private PlayerType type; // Type of this player. Can be one of either Healer, Tank, Samurai, BlackMage,
								// or Phoenix
	private double maxHP; // Max HP of this player
	private double currentHP; // Current HP of this player
	private double atk; // Attack power of this player
	
	//ADD
	private int turn = 0;
	private int skillturn;
	private Player cursed = null;
	private String Teammember;
	private String Row;
	private int place;
	private boolean isStrong;
	private boolean isToxic;
	private boolean isslept;

	/**
	 * Constructor of class Player, which initializes this player's type, maxHP, atk, numskillturns, 
	 * as specified in the given table. It also reset the internal turn turn of this player. 
	 * @param _type
	 */
	public Player(PlayerType _type)
	{	
		//INSERT YOUR CODE HERE
		this.type = _type;
		if(this.type == PlayerType.Healer) {
			this.maxHP = 4790;
			this.atk = 238;
			this.currentHP = 4790;
			skillturn = 4;
		}
		else if(this.type == PlayerType.Tank) {
				this.maxHP = 5340;
				this.atk = 255;
				this.currentHP = 5340;
				skillturn = 4;
		}
		else if(this.type == PlayerType.Samurai) {
				this.maxHP = 4005;
				this.atk = 368;
				this.currentHP = 4005;
				skillturn = 3;
		}
		else if(this.type == PlayerType.BlackMage) {
				this.maxHP = 4175;
				this.atk = 303;
				this.currentHP = 4175;
				skillturn = 4;
		}
		else if(this.type == PlayerType.Phoenix) {
				this.maxHP = 4175;
				this.atk = 209;
				this.currentHP = 4175;
				skillturn = 8;
		}
		else if(this.type == PlayerType.Cherry) {
				this.maxHP = 3560;
				this.atk = 198;
				this.currentHP = 3560;
				skillturn = 4;
		}
	}

	/**
	 * Returns the current HP of this player
	 * 
	 * @return
	 */
	public double getCurrentHP() {
		// INSERT YOUR CODE HERE
		return currentHP;
	}

	/**
	 * Returns type of this player
	 * 
	 * @return
	 */
	public Player.PlayerType getType() {
		// INSERT YOUR CODE HERE
		return type;
	}

	/**
	 * Returns max HP of this player.
	 * 
	 * @return
	 */
	public double getMaxHP() {
		// INSERT YOUR CODE HERE
		return maxHP;
	}

	/**
	 * Returns whether this player is sleeping.
	 * 
	 * @return
	 */
	public boolean isSleeping() {
		// INSERT YOUR CODE HERE
		return isslept ;
	}

	/**
	 * Returns whether this player is being cursed.
	 * 
	 * @return
	 */
	public boolean isToxic() {
		// INSERT YOUR CODE HERE
		return isToxic;
	}

	/**
	 * Returns whether this player is alive (i.e. current HP > 0).
	 * 
	 * @return
	 */
	public boolean isAlive() {
		// INSERT YOUR CODE HERE
		if(this.currentHP >0) {
		return true;
		}else {
			return false;
		}
	}

	/**
	 * Returns whether this player is taunting the other team.
	 * 
	 * @return
	 */
	public boolean isStrong() {
		// INSERT YOUR CODE HERE
		return isStrong;
	}

	public void attack(Player focus) {
		// INSERT YOUR CODE HERE
		focus.currentHP = focus.currentHP -  this.atk; 
		if(focus.currentHP < 0) {
			focus.currentHP = 0;
		}
	}

	public void useSpecialAbility(Player[][] teamMate, Player[][] Theirteammate) {
		// INSERT YOUR CODE HERE
		turn =0;
		if (this.type == PlayerType.Phoenix) {
			Player neverdie = teamMate[0][0];
			boolean find_neverdie = false;
			for (int i = 0; i < 2; i++) {
				for (int j = 0; j < teamMate[0].length; j++) {
					if(!teamMate[i][j].isAlive() && find_neverdie == false) {
						neverdie = teamMate[i][j];
						find_neverdie = true;
					}
				}
			}
			System.out.println("#"+playerInfo()+"Revives"+neverdie.playerInfo());
			neverdie.currentHP = neverdie.currentHP + (neverdie.maxHP*0.3);
			neverdie.turn = 0;
			neverdie.setTaunting(false);
			neverdie.setCursed(false);
			neverdie.setSleeeping(false);
		}
		else if(this.type == PlayerType.BlackMage) {
			Player cursing = findtoxic(Theirteammate);
			if(isStrong(Theirteammate) != null) {
				cursing = isStrong(Theirteammate);
			}
			if (cursing != null) {
				System.out.println("#"+playerInfo()+" Curses "+cursing.playerInfo());
				cursing.setCursed(true);
				this.cursed = cursing;
			}
		}
		else if(this.type == PlayerType.Healer) {
			Player lowest = needHealing(teamMate);
			if(lowest.isToxic) {
				return;
			}
			if(lowest.currentHP<lowest.maxHP && lowest.currentHP > 0 && lowest.isToxic == false) {
				System.out.println("#"+playerInfo()+" Heals "+lowest.playerInfo());
				lowest.currentHP = lowest.currentHP + (lowest.maxHP * 0.25);
				if(lowest.currentHP > lowest.maxHP) {
					lowest.currentHP = lowest.maxHP;
				}
			}
		}
		else if(this.type == PlayerType.Tank) {
			System.out.println("#"+playerInfo()+" is Taunting ");
			setTaunting(true);
		}
		else if(this.type == PlayerType.Cherry) {
			for (int i = 0; i < 2; i++) {
				for (int j = 0; j < Theirteammate[0].length; j++) {
					if(Theirteammate[i][j].isAlive()) {
						System.out.println("#"+playerInfo()+" Feeds a Fortune Cookies to "+Theirteammate[i][j].playerInfo());
						Theirteammate[i][j].setSleeeping(true);
					}
				}
			}
		}
	}

	/**
	 * This method is called by Arena when it is this player's turn to take an
	 * action. By default, the player simply just "attack(focus)". However, once
	 * this player has fought for "numskillturns" rounds, this player must perform
	 * "useSpecialAbility(teamMate, Theirteammate)" where each player type performs his
	 * own special move.
	 * 
	 * @param arena
	 */
	public void takeAction(Arena arena) {
		// INSERT YOUR CODE HERE
		if(this.type == PlayerType.BlackMage && cursed != null) {
			cursed.setCursed(false);
			cursed = null;
		}
		if(this.isStrong) {
			this.setTaunting(false);
		}
		if(this.isslept) {
			this.setSleeeping(false);
			return;
		}
		turn++;
		Player[][] teamMate = null;
		Player[][] Theirteammate = null;
		if(arena.getMyTeam(this) == arena.getTeamA()) {
			 teamMate = arena.getTeamA();
			 Theirteammate = arena.getTeamB();	
		}
		else if(arena.getMyTeam(this) == arena.getTeamB()) {
			 teamMate = arena.getTeamB();
			 Theirteammate = arena.getTeamA();
		}
		if(turn == this.skillturn) {
		switch(this.type) {
		case Healer:
			useSpecialAbility(teamMate, Theirteammate);
			break;
		case Tank:
			useSpecialAbility(teamMate, Theirteammate);
			break;
		case Samurai:
			turn = 0;
			Player focus = arena.findTarget(this);
			if(focus == null) {
				return;
			}
				System.out.println("#"+playerInfo()+" Double-Slash "+focus.playerInfo());
				attack(focus);
				attack(focus);
				break;
		case BlackMage:
			useSpecialAbility(teamMate, Theirteammate);
			break;
		case Phoenix:
			useSpecialAbility(teamMate, Theirteammate);
			break;
		case Cherry:
			useSpecialAbility(teamMate, Theirteammate);
			break;
		}
		}
		else {
			Player focus = arena.findTarget(this);
			if(focus != null) {
				attack(focus);
				
				System.out.println("#"+playerInfo()+" Attacks "+focus.playerInfo()/*+focus.currentHP*/);
			}
		}
		
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < Theirteammate[i].length; j++) {
				if(Theirteammate[i][j].isAlive() ==false) {
					Theirteammate[i][j].isToxic = false;
					Theirteammate[i][j].isStrong = false;
					Theirteammate[i][j].isslept = false;
				}
			}
		}
}

	/**
	 * This method overrides the default Object's toString() and is already
	 * implemented for you.
	 */
	@Override
	public String toString() {
		return "[" + this.type.toString() + " HP:" + this.currentHP + "/" + this.maxHP + " ATK:" + this.atk + "]["
				+ ((this.isToxic()) ? "C" : "") + ((this.isStrong()) ? "T" : "") + ((this.isSleeping()) ? "S" : "")
				+ "]";
	}
	//=======================//ADD//===============================//
	public String playerInfo() {
		return this.Teammember+"["+this.Row+"]["+this.place+"] {"+this.type.toString()+"}";
	}
	public Player needHealing(Player[][] teamMate) {
		double lowhp = 9999;
		Player focus = null;
		for(int i =0;i<2;i++) {
			if(i==0) {
				for(int j =0;j<teamMate[i].length;j++) {
					if(teamMate[i][j].getCurrentHP() > 0 && teamMate[i][j].getCurrentHP() /(teamMate[i][j].getMaxHP())*100 < lowhp) {
						lowhp = teamMate[i][j].getCurrentHP()/(teamMate[i][j].getMaxHP())*100;
						focus = teamMate[i][j];
					}
				}
			}
			else {
				for (int j = 0; j < teamMate[i].length; j++) {
					if(teamMate[i][j].getCurrentHP() > 0 && teamMate[i][j].getCurrentHP() /(teamMate[i][j].getMaxHP())*100 < lowhp) {
						lowhp = teamMate[i][j].getCurrentHP()/(teamMate[i][j].getMaxHP())*100;
						focus = teamMate[i][j];
						
					}
				}
			}
		}
		return focus;
	}
	public Player findtoxic(Player[][] Theirteammate) {
		double min = 9999;
		Player focus = null;
		boolean findToxic = false;
		for (int i = 0; i < 2; i++) {
			if(i==0) {
				for (int j = 0; j < Theirteammate[i].length; j++) {
					if(Theirteammate[i][j].isAlive() && findToxic == false &&Theirteammate[i][j].currentHP < min ) {
						min = Theirteammate[i][j].currentHP;
						focus = Theirteammate[i][j];
						findToxic = true;
					}
				}
			}else {
				for (int j = 0; j < Theirteammate[i].length; j++) {
					if(Theirteammate[i][j].isAlive() && Theirteammate[i][j].currentHP < min && findToxic == false) {
						min = Theirteammate[i][j].currentHP;
						focus = Theirteammate[i][j];
						findToxic = true;
					}
				}
			}
		}
		return focus;
	}
	public Player isStrong(Player[][] team) {
		for (int i = 0; i < 2; i++) {
			for (int j = 0; j < team[i].length; j++) {
				if(team[i][j].isStrong) {
					return team[i][j];
				}
			}
		}
		return null;
	}
	public String Teammember() {
		return Teammember;
	}
	public String Rows() {
		return Row;
	}
	public int getplace() {
		return place;
	}
	public void setplace(int place,String Teammember,String Row) {
		this.place = place;
		this.Teammember = Teammember;
		this.Row = Row;
	}
	public void setSleeeping(boolean isslept) {
		this.isslept = isslept;
	}

	public void setTaunting(boolean isStrong) {
		this.isStrong = isStrong;
	}

	public void setCursed(boolean isToxic) {
		this.isToxic = isToxic;
    }
}
